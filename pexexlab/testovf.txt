
------ Examine integer overflow handling ------

1. -O2
.s:
       .file   "testovf.c"
        .text
        .p2align 4,,15
        .globl  testovf
        .type   testovf, @function
testovf:
.LFB0:
        .cfi_startproc
        xorl    %eax, %eax
        ret
        .cfi_endproc
.LFE0:
        .size   testovf, .-testovf
        .globl  big
        .data
        .align 8
        .type   big, @object
        .size   big, 8
big:
        .quad   9223372036854775807
        .ident  "GCC: (GNU) 6.2.0"
        .section        .note.GNU-stack,"",@progbits
Also the .o file:
.o:
0000000000000000 <testovf>:
   0:   31 c0                   xor    %eax,%eax
   2:   c3                      retq

< Description >

From the assembly code, we can see that it uses 'xor %eax %eax' to generate a
zero and stores it in %eax (return value).
I think that with -O2, the compiler detects that there must be an integer
overflow, so it just gives 0 and return it without any computation. 

2. -O2 -fsanitize=undefined
(Since .o file is more clear to read, I paste .o file here and part of .s file
in the later part.)
0000000000000000 <testovf>:
   0:   55                      push   %rbp
   1:   53                      push   %rbx
   2:   48 ba ff ff ff ff ff    movabs $0x7fffffffffffffff,%rdx
   9:   ff ff 7f
   c:   48 83 ec 08             sub    $0x8,%rsp
  10:   48 8b 1d 00 00 00 00    mov    0x0(%rip),%rbx        # 17 <testovf+0x17>
  17:   48 89 dd                mov    %rbx,%rbp
  1a:   48 01 d5                add    %rdx,%rbp
  1d:   70 0d                   jo     2c <testovf+0x2c>
  1f:   48 39 eb                cmp    %rbp,%rbx
  22:   0f 9f c0                setg   %al
  25:   48 83 c4 08             add    $0x8,%rsp
  29:   5b                      pop    %rbx
  2a:   5d                      pop    %rbp
  2b:   c3                      retq
  2c:   48 89 de                mov    %rbx,%rsi
  2f:   bf 00 00 00 00          mov    $0x0,%edi
  34:   e8 00 00 00 00          callq  39 <testovf+0x39>
  39:   eb e4                   jmp    1f <testovf+0x1f>

< Description >

%rbx: LONG_MAX
%rbp: LONG_MAX

After it adds up the two values according to the instruction at 0x1a, it jumps
to address 0x2c if it overflows. At 0x34, it calls some function and after that
it returns to 0x1f to do the comparison. To see what function the compiler
calls, I use:
'gcc -S -O2 -fsanitize=undefined testovf.c' and open testovf.s:
     	...
        addq    %rdx, %rbp
        jo      .L6
.L2:
        cmpq    %rbp, %rbx
        setg    %al
        addq    $8, %rsp
        .cfi_remember_state
        .cfi_def_cfa_offset 24
        popq    %rbx
        .cfi_def_cfa_offset 16
        popq    %rbp
        .cfi_def_cfa_offset 8
        ret
.L6:
        .cfi_restore_state
        movq    %rbx, %rsi
        movl    $.Lubsan_data0, %edi
        call    __ubsan_handle_add_overflow
        jmp     .L2
	...

As illustrated in the assembly code, after we add the two values (LONG_MAX,
LONG_MAX), if there is an overflow, then it will jump to .L6 and call function
'__ubsan_handle_add_overflow' to handle the overflow. If there is no overflow,
it will do the normal comparison.

3. -O2 -fwrapv
.s file:
        .file   "testovf.c"
        .text
        .p2align 4,,15
        .globl  testovf
        .type   testovf, @function
testovf:
.LFB0:
        .cfi_startproc
        movq    big(%rip), %rdx
        movabsq $9223372036854775807, %rax
        addq    %rdx, %rax
        cmpq    %rax, %rdx
        setg    %al
        ret
        .cfi_endproc
.LFE0:
        .size   testovf, .-testovf
        .globl  big
        .data
        .align 8
        .type   big, @object
        .size   big, 8
big:
        .quad   9223372036854775807
        .ident  "GCC: (GNU) 6.2.0"
        .section        .note.GNU-stack,"",@progbits

And results in .o file:	
0000000000000000 <testovf>:
   0:   48 8b 15 00 00 00 00    mov    0x0(%rip),%rdx        # 7 <testovf+0x7>
   7:   48 b8 ff ff ff ff ff    movabs $0x7fffffffffffffff,%rax
   e:   ff ff 7f
  11:   48 01 d0                add    %rdx,%rax
  14:   48 39 c2                cmp    %rax,%rdx
  17:   0f 9f c0                setg   %al
  1a:   c3                      retq

< Description >
(-fwrapv: This option instructs the compiler to assume that signed arithmetic
overflow of addition, subtraction and multiplication wraps around using twos-
complement representation.)

Using -O2 -fwrapv, the compiler does the computation ('add %rdx,%rax') and then
compares the result (cmp %rax,%rdx). Integer overflow occurs and there is no
warning. Actually, it is a direct translation of the code.

